{"version":3,"sources":["service/ApiService.js","service/item/index.js","app/item/ItemList.js","app/item/index.js","service/npc/index.js","app/npc/NpcList.js","app/npc/index.js","app/index.js","utils/serviceWorker.js","index.js"],"names":["ApiService","baseURL","this","url","options","fetchOptions","headers","institutionuuid","axios","getOptions","method","request","postOptions","putOptions","deleteOptions","getAllItems","get","then","response","data","ItemList","props","className","items","map","item","index","key","name","ItemDashBoard","useState","isLoaded","state","setState","useEffect","getAllNpcs","NpcList","npcs","npc","proptype","PropTypes","array","isRequired","NpcDashboard","App","path","component","from","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4PAEqBA,E,WACjB,WAAYC,GAAU,oBAClBC,KAAKD,QAAUA,E,oDAGXE,EAAKC,GACT,IAAMC,EAAY,eACXD,EADW,CAEdE,QAAS,CACLC,gBAAiBL,KAAKK,mBAI9B,OAAOC,IAAM,GAAD,OAAIN,KAAKD,SAAT,OAAmBE,GAAOE,K,0BAGtCF,EAAKC,GACL,IAAMK,EAAU,eACTL,EADS,CAEZM,OAAQ,QAEZ,OAAOR,KAAKS,QAAQR,EAAKM,K,2BAGxBN,EAAKC,GACN,IAAMQ,EAAW,eACVR,EADU,CAEbM,OAAQ,SAGZ,OAAOR,KAAKS,QAAQR,EAAKS,K,0BAGzBT,EAAKC,GACL,IAAMS,EAAU,eACTT,EADS,CAEZM,OAAQ,QAGZ,OAAOR,KAAKS,QAAQR,EAAKU,K,6BAGtBV,EAAKC,GACR,IAAMU,EAAa,eACZV,EADY,CAEfM,OAAQ,WAGZ,OAAOR,KAAKS,QAAQR,EAAKW,K,yCAIzB,OAAON,Q,KClDFO,EAFD,IAAIf,EAAW,yBAEIgB,IAAI,UAAUC,MAAK,SAACC,GAAD,OAAcA,EAASC,QCW1DC,EAZE,SAACC,GACd,OACI,yBAAKC,UAAU,aACTD,EAAME,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAAiB,yBAAKC,IAAMD,GAAUD,EAAKG,WCwB1DC,EAxBO,WAAO,IAAD,EACEC,mBAAS,CAC/BC,UAAU,EACVR,MAAO,KAHa,mBACjBS,EADiB,KACVC,EADU,KAYxB,OANAC,qBAAU,WACNnB,IAAcE,MAAK,SAACE,GAChBc,EAAS,CAAEF,UAAU,EAAMR,MAAOJ,SAEvC,IAEEa,EAAMD,SAKP,yBAAKT,UAAU,6BACX,2CACA,kBAAC,EAAD,CAAUC,MAAQS,EAAMT,SANrB,kDCfFY,EAFE,IAAInC,EAAW,yBAEGgB,IAAI,SAASC,MAAK,SAACC,GAAD,OAAcA,EAASC,Q,OCDpEiB,EAAU,SAACf,GACb,OACI,yBAAKC,UAAU,YACTD,EAAMgB,KAAKb,KAAI,SAACc,EAAKZ,GAAN,OAAgB,yBAAKC,IAAMD,GAAUY,EAAIV,WAKtEQ,EAAQG,SAAW,CACfF,K,OAAMG,EAAUC,MAAMC,YAGXN,QCaAO,EAxBM,WAAO,IAAD,EACGb,mBAAS,CAC/BC,UAAU,EACVM,KAAM,KAHa,mBAChBL,EADgB,KACTC,EADS,KAYvB,OANAC,qBAAU,WACNC,IAAalB,MAAK,SAACE,GACfc,EAAS,CAAEF,UAAU,EAAMM,KAAMlB,SAEtC,IAEEa,EAAMD,SAKP,yBAAKT,UAAU,4BACX,0CACA,kBAAC,EAAD,CAASe,KAAOL,EAAMK,QANnB,iDCWAO,EAvBH,WACR,OACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,KAAK,SACLC,UAAYjB,IAEhB,kBAAC,IAAD,CACIgB,KAAK,QACLC,UAAaH,IAEjB,kBAAC,IAAD,CACII,KAAK,IACLC,GAAG,cCRPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6358c95c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default class ApiService {\r\n    constructor(baseURL) {\r\n        this.baseURL = baseURL;\r\n    }\r\n\r\n    request(url, options) {\r\n        const fetchOptions = {\r\n            ...options,\r\n            headers: {\r\n                institutionuuid: this.institutionuuid\r\n            }\r\n        };\r\n\r\n        return axios(`${this.baseURL}${url}`, fetchOptions);\r\n    }\r\n\r\n    get(url, options) {\r\n        const getOptions = {\r\n            ...options,\r\n            method: 'GET'\r\n        };\r\n        return this.request(url, getOptions);\r\n    }\r\n\r\n    post(url, options) {\r\n        const postOptions = {\r\n            ...options,\r\n            method: 'POST'\r\n        };\r\n\r\n        return this.request(url, postOptions);\r\n    }\r\n\r\n    put(url, options) {\r\n        const putOptions = {\r\n            ...options,\r\n            method: 'PUT'\r\n        };\r\n\r\n        return this.request(url, putOptions);\r\n    }\r\n\r\n    delete(url, options) {\r\n        const deleteOptions = {\r\n            ...options,\r\n            method: 'DELETE'\r\n        };\r\n\r\n        return this.request(url, deleteOptions);\r\n    }\r\n\r\n    getAxiosInstance() {\r\n        return axios;\r\n    }\r\n}\r\n","import ApiService from '../ApiService';\r\n\r\nconst api = new ApiService(\"http://localhost:8080\")\r\n\r\nexport const getAllItems = api.get('/items').then((response) => response.data)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ItemList = (props) => {\r\n    return (\r\n        <div className=\"item-list\">\r\n            { props.items.map((item, index) => <div key={ index }>{ item.name }</div>) }\r\n        </div>\r\n    );\r\n};\r\n\r\nItemList.propTypes = {\r\n    items: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ItemList;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { getAllItems } from '../../service/item';\r\n\r\nimport ItemList from './ItemList';\r\n\r\nconst ItemDashBoard = () => {\r\n    const [state, setState] = useState({\r\n        isLoaded: false,\r\n        items: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        getAllItems().then((data) => {\r\n            setState({ isLoaded: true, items: data })\r\n        });\r\n    }, []);\r\n\r\n    if (!state.isLoaded) {\r\n        return <div>Loading items...</div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"items-container container\">\r\n            <h2>OSRS Items:</h2>\r\n            <ItemList items={ state.items }/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemDashBoard;","import ApiService from '../ApiService';\r\n\r\nconst npcAPI = new ApiService(\"http://localhost:8080\")\r\n\r\nexport const getAllNpcs = npcAPI.get('/npcs').then((response) => response.data);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NpcList = (props) => {\r\n    return (\r\n        <div className=\"npc-list\">\r\n            { props.npcs.map((npc, index) => <div key={ index }>{ npc.name }</div>) }\r\n        </div>\r\n    )\r\n}\r\n\r\nNpcList.proptype = {\r\n    npcs: PropTypes.array.isRequired\r\n};\r\n\r\nexport default NpcList;","import React, { useEffect, useState } from 'react';\r\nimport { getAllNpcs } from '../../service/npc';\r\nimport NpcList from './NpcList';\r\n\r\nconst NpcDashboard = () => {\r\n    const [state, setState] = useState({\r\n        isLoaded: false,\r\n        npcs: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        getAllNpcs().then((data) => {\r\n            setState({ isLoaded: true, npcs: data })\r\n        });\r\n    }, []);\r\n\r\n    if (!state.isLoaded) {\r\n        return <div>Loading npcs...</div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"npcs-container container\">\r\n            <h2>OSRS Npcs:</h2>\r\n            <NpcList npcs={ state.npcs }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NpcDashboard;","import React from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport ItemDashBoard from './item';\r\nimport NpcDashboard from './npc';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path=\"/items\"\r\n                        component={ ItemDashBoard }\r\n                    />\r\n                    <Route\r\n                        path=\"/npcs\"\r\n                        component= { NpcDashboard }\r\n                    />\r\n                    <Redirect\r\n                        from=\"*\"\r\n                        to=\"/npcs\"\r\n                    />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport * as serviceWorker from './utils/serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}